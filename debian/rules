#!/usr/bin/make -f

#
# Example basic IPlinux packaging rules.
#
# Public domain.
#

#
# This variable holds the architecture for the `host' - system on which program
# will be run.
#
DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
#
# This variable holds the architecture for the `build' - compilation system.
#
DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

#
# Old good CFLAGS. -g is here to produce debugging info. It will be split to
# separate package (or discarded) later, by dh_strip.
#
CFLAGS = -g -Wall

#
# DEB_BUILD_OPTIONS is a variable for passing various options to the build
# process.
#
# It's general form is DEB_BUILD_OPTIONS=<foo>,<bar>,<baz>[=N],...
#
# `noopt' disables optimizations (should be enabled by default).
#
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
        CFLAGS += -O0
else
        CFLAGS += -O2
endif

#
# `parallel=N` parallels builds.
#
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	NJOBS = -j $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

#
# `clean' rule ought to clean all artifacts of package build and turn package
# directory back to state it was after source unpacking.
#
clean:
	dh_clean # cleans all debhelper temporary files
	[ ! -f Makefile ] || $(MAKE) $(NJOBS) distclean # Clean temporary files of build process
	-rm -rf Makefile.in aclocal.m4 autom4te.cache configure depcomp install-sh missing

#
# `install' rule is not strictly necessary, but often exist as a prerequisite of
# `binary-indep' and `binary-arch' rules. It should install built software to
# some directory.
#
# If the only one binary package is built from source package, then `install'
# rule usually install all files to debian/<package name>, and `binary-*' rules
# do not touch files.
#
# If more than one binary package is build from source package, then `install'
# rule is used to install files to debian/tmp directory, and `binary-*' rules
# are used to split one directory to several.
#
install: build
	$(MAKE) $(NJOBS) DESTDIR=$(CURDIR)/debian/hello install

#
# `build' rule is also not strictly necessary, but often exist as a prerequisite
# of `install' rule. It should perform building of package, but should not
# install anything to the debian/
#
# DEB_{HOST,BUILD}_GNU_TYPE variables are passed to configure (or autogen.sh,
# which in turn passes them to configure) to enable cross-compilation.
#
# This way dpkg-buildpackage -armel will generate package for arm-linux-gnueabi,
# and not a ordinary PC package.
#
build: build-stamp
build-stamp:
	./autogen.sh --prefix=/usr --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE)
	$(MAKE) $(NJOBS)
	touch build-stamp

#
# `binary-indep' rule is required. It should produce all Arch: all binary
# packages necessary.
#
# `hello' package does not have any Arch: all packages, so this rule is empty.
#
binary-indep: install

#
# `binary-arch' rule is required: It should produce all binary packages which
# are not Arch: all
#
# As `hello' package is quite simple, sequence of dh_* commands here is
# short. See another packages for more useful commands to be used in binary-*
# targets.
#
# Not that unlike Debian, no documentation, examples, manpages or changelogs are
# to be packaged. If upstream make system installs them, they should be ignored
# during packaging.
#
binary-arch: install
	dh_strip -s # strips the debugging information (optionally to separate -dbg package)
	dh_fixperms -s # ajusts permissions
	dh_installdeb -s # installs metadata (triggers, maint. scripts etc)
	dh_shlibdeps -s # generates shared library dependencies
	dh_gencontrol -s # generates and installs binary package control file
	dh_builddeb -s # makes a .deb file from debian/<package>

#
# This target is required and should just build all binary packages.
#
binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean
